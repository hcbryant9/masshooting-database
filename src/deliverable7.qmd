---
title: CMSC508 - Deliverable 7 - Project Implementation
author: Group 15 - Alex Lutterloah & Henry Bryant
date: last-modified
format:
    html:
        theme: cosmos
        copy-code: true
        toc: true
        embed-resources: true
---

## Overview and Deliverables
Each year there are hundreds of mass shootings across the United States. The goal of this Mass Shooting database is to provide reliable information to the public for awareness, and to professionals that may be able to use the data to aid in mass shooting prevention, and assist with working towards a solution to lower the amount of shootings each year. This database can be filtered to show results that will help show trends and patterns based on various items related to mass shooting events, such as weapon type, location, victim information, and more.

- [Pitch Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_w2ohbtju/embed/dynamic){target="_blank"}
- [Design Video](https://vcu.zoom.us/rec/play/ve8z-iZ-EupsxRGmApWAUnoMX-NNneGpkxKNO3MJcLZObA71x5EPq23J7oOwL1rhWZpbNyjOouHUDi99.ht66FxE-iDqHe8BT?canPlayFromShare=true&from=share_recording_detail&startTime=1697497455000&componentName=rec-play&originRequestUrl=https%3A%2F%2Fvcu.zoom.us%2Frec%2Fshare%2Fa9qUbpoj2cEf6BzZW-elMRA_1eAUyI3sfD5XqDQvqZeecMHKAOtpIPl3L4s-FnYU.bQ5lnj9uYqJ46DRv%3FstartTime%3D1697497455000){target="_blank"}
- [Final Reflections Video](){target="_blank"}
- [Project Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15){target="_blank"}

## Problem Description

### Problem Domain
The problem domain is the amount of mass shootings that occur across the United States every year. A mass shooting as defined by the Federal Bureau of Investigation (FBI) is considered an event where one or more individuals are "actively engaged in killing or attempting to kill people in a populated area." Additionally, the motivation behind the attack must not correlate with gang violence, or terrorist activity. Last year alone for example, there were over 600 cases of mass shootings, and according to [Rockefeller Institute of Government](https://rockinst.org/gun-violence/mass-shooting-factsheet/){target="_blank"} there have been 1569 deaths, and 3923 total victims from mass shootings in the United States since 1966. A lot of these tragic events happen so frequently that a lot of the data behind the shooting becomes hard to access. The lack of clear and filterable data prevents our ability to successfully work on a solution to prevent mass shootings. 

### Need
This database is needed because mass shootings occur in such a high frequency across the nation that many cases and incidents are not known to the general public. Our database would assist with shedding light on all mass shootings, which helps display the severity of mass shootings in the United States. Having a non-biased source of mass shooting information may help with the spreading of misinformation pertaining to the incidents. We can also try to use previous mass shootings' data to help predict where others may occur. For example, a big issue is screening gun purchasers - this database could help identify patterns in mass shooters background information, and then we could use that information to implement a solution to minimize the chance of the wrong person having access to legally purchase a weapon.

### Context, scope and perspective
The user base for a database like this would primarily be for the general public, in hopes of spreading awareness of the scale of this issue in the United States. It could also be used by professionals or researchers that are looking to study patterns or simply need statistics pertaining to mass shootings. A further reach is that it could potentially be used by developers to create a predictive model for mass shootings. The general perspective of this database would be for anyone that wants to access and filter data related to mass-shootings, for any reason whether personal or professional.

### User roles and use cases
The general public seeks reliable information on mass shootings to stay informed about the issue and understand its severity. They will use the database to access statistics and search for information on specific incidents, locations, or trends. Law enforcement agencies and policymakers require data-driven insights to formulate and evaluate policies related to gun control, mental health, and public safety. They will monitor trends to inform their policy decisions, using the database for risk assessment and identifying areas in need of policy intervention. Additionally, the database can be seamlessly integrated into various external systems, including news outlets, public awareness campaigns, predictive models, and research institutions.

### Security and Privacy
Security and privacy are top priorities in the database design. User authentication will be enforced for specific data access, while encryption will protect data during transmission and storage. Access controls will limit data access to authorized users, ensuring the integrity of the database and safeguarding sensitive information. This will make sure that we can prevent unauthorized users from modifying or deleting information. Regular audits and updates will maintain these security and privacy measures.

## Database Design

### Entity-relationship diagram (ERD)

```{mermaid}
erDiagram

  INCIDENT }|--|| INCIDENT_VICTIM : has
  INCIDENT_VICTIM ||--|{ VICTIM : has
  INCIDENT }|--|| INCIDENT_PERPETRATOR : has
  INCIDENT_PERPETRATOR ||--|{ PERPETRATOR : has
  PERPETRATOR ||--|{ WEAPON : uses

    INCIDENT{
        int incident_id PK
        date date
        string city
        string state_code
        string description
        string motive
    }
    VICTIM{
        int victim_id PK
        string name
        int age
        string sex
        string status
    }
    PERPETRATOR{
        int perpetrator_id PK
        string name
        int age
        string sex
        string criminal_bg_description
    }
    WEAPON{
        int perpetrator_id PK
        int weapon_id PK
        string type
        string description
    }
    INCIDENT_VICTIM{
        int incident_id PK
        int victim_id PK
    }
    INCIDENT_PERPETRATOR{
        int incident_id PK
        int perpetrator_id PK
    }

```

### Link to DDL
You can see the DDL at the link below.\
[DDL file on Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15/blob/b9b8472d38c80e85a0c347c54a125b708ca58d0c/src/db-ddl.sql){target="_blank"}

## API Overview
This API can be used to query our United States Mass Shooting Database. Below are instructions on how to use the API, as well as some examples of the API in action.\
View the source code for this API at the link below.\
[sever.py on Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15/blob/7b12b2ba3b846d86c61b85b19077b5026ab60e95/src/server.py){target="_blank"}

### API Documentation
**How to use the API**

*The root URL will query the database to show all of the tables.*\
```http://127.0.0.1:5000/```

For the following API queries, the valid tables include:\
'incident', 'perpetrator', 'victim', and 'weapon.'

*Get all records of a specified table.*\
```http://127.0.0.1:5000/<table name>```

*Get a specific record from a specific table.*\
```http://127.0.0.1:5000/<table name>/<id>```

*Get all perpetrators of a specified incident.*\
```http://127.0.0.1:5000/incident/<id>/perpetrators```

*Get all victims of a specified incident.*\
```http://127.0.0.1:5000/incident/<id>/victims```

*Get all weapons of a specified perpetrator.*\
```http://127.0.0.1:5000/perpetrator/<id>/weapons```

*Add an incident to the Database (via POST request sending JSON)*\
```http://127.0.0.1:5000/incident/add```

*Update a specified incident in the Database (via POST request sending JSON)*\
```http://127.0.0.1:5000/incident/update/<id>```

*Delete a specific record from a specific table.*\
```http://127.0.0.1:5000/<table name>/remove/<id>```


### API Demonstration
```{python}
#| eval: true
#| echo: false
import os
import requests
import pandas as pd
from IPython.display import display,Markdown,HTML

# Data for the new incident
add_incident = {
    'date': '2021-05-20',
    'city': 'Baltimore',
    'state_code': 'MD',
    'description': 'Church attack',
    'motive': 'Relgious beliefs'
}

# Data to use for updating an incident
update_incident = {
    'date': '2016-06-12',
    'city': 'Orlando',
    'state_code': 'FL',
    'description': 'Nightclub shooting',
    'motive': 'Hate Crime'
}

# Authentication #

# Create variables to store API key and base URL
API_KEY = 'API_KEY'
BASE_URL = 'http://127.0.0.1:5000'  

# Sends a request to server to get an authentication token
# def authenticate():
#     endpoint = f"{BASE_URL}/auth"
#     response = requests.post(endpoint, json={'api_key': API_KEY})

#     if response.status_code == 200:
#         return response.json().get('token')
#     else:
#         print("Authentication failed. Here is the api key: ", API_KEY)
#         return None

# Store the token that was retrieved from the authenticate function
#token = authenticate()

# Create a JSON header for future requests
#headers = {'Authorization': token}
```

#### API Get Example
```{python}
#| eval: true
#| echo: true

# API call with query parameters
#response = requests.get(f'{BASE_URL}/incident/1', headers=headers)
response = requests.get(f'{BASE_URL}/incident/1')
result = pd.read_json(response)

print(result)
```

#### API Insert Example
```{python}
#| eval: true
#| echo: false
#| 
# Send a POST request to add the incident
#response = requests.post('http://127.0.0.1:5000/incident/add', json=new_incident)
# API call with query parameters
#response = requests.get('https://rickandmortyapi.com/api/character/1,2,3,4,5').json()
```

#### API Update Example
```{python}
#| eval: true
#| echo: false
#| 
# Send a POST request to add the incident
#response = requests.post('http://127.0.0.1:5000/incident/add', json=new_incident)
# API call with query parameters
#response = requests.get('https://rickandmortyapi.com/api/character/1,2,3,4,5').json()
```

#### API Delete Example
```{python}
#| eval: true
#| echo: false
#| 
# Send a POST request to add the incident
#response = requests.post('http://127.0.0.1:5000/incident/add', json=new_incident)
# API call with query parameters
#response = requests.get('https://rickandmortyapi.com/api/character/1,2,3,4,5').json()
```

## Considerations and Reflections

### Future Considerations
What needs to be done next to take your project to the next level? If you had more time, what would you do next?

### Reflections on project
How did the project go? Did you achieve what you originally intended to build? If not, what kept you from achieving it?