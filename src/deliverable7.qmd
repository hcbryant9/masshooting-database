---
title: CMSC508 - Deliverable 7 - Project Implementation
author: Group 15 - Alex Lutterloah & Henry Bryant
date: last-modified
format:
    html:
        theme: cosmos
        copy-code: true
        code-fold: true
        code-overflow: scroll
        toc: true
        embed-resources: true
---

## Overview and Deliverables
Each year there are hundreds of mass shootings across the United States. The goal of this Mass Shooting database is to provide reliable information to the public for awareness, and to professionals that may be able to use the data to aid in mass shooting prevention, and assist with working towards a solution to lower the amount of shootings each year. This database can be filtered to show results that will help show trends and patterns based on various items related to mass shooting events, such as weapon type, location, victim information, and more.

- [Pitch Video](https://cdnapisec.kaltura.com/index.php/extwidget/preview/partner_id/1888231/uiconf_id/28242191/entry_id/1_w2ohbtju/embed/dynamic){target="_blank"}
- [Design Video](https://vcu.zoom.us/rec/play/ve8z-iZ-EupsxRGmApWAUnoMX-NNneGpkxKNO3MJcLZObA71x5EPq23J7oOwL1rhWZpbNyjOouHUDi99.ht66FxE-iDqHe8BT?canPlayFromShare=true&from=share_recording_detail&startTime=1697497455000&componentName=rec-play&originRequestUrl=https%3A%2F%2Fvcu.zoom.us%2Frec%2Fshare%2Fa9qUbpoj2cEf6BzZW-elMRA_1eAUyI3sfD5XqDQvqZeecMHKAOtpIPl3L4s-FnYU.bQ5lnj9uYqJ46DRv%3FstartTime%3D1697497455000){target="_blank"}
- [Final Reflections Video](){target="_blank"}
- [Project Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15){target="_blank"}

## Problem Description

### Problem Domain
The problem domain is the amount of mass shootings that occur across the United States every year. A mass shooting as defined by the Federal Bureau of Investigation (FBI) is considered an event where one or more individuals are "actively engaged in killing or attempting to kill people in a populated area." Additionally, the motivation behind the attack must not correlate with gang violence, or terrorist activity. Last year alone for example, there were over 600 cases of mass shootings, and according to [Rockefeller Institute of Government](https://rockinst.org/gun-violence/mass-shooting-factsheet/){target="_blank"} there have been 1569 deaths, and 3923 total victims from mass shootings in the United States since 1966. A lot of these tragic events happen so frequently that a lot of the data behind the shooting becomes hard to access. The lack of clear and filterable data prevents our ability to successfully work on a solution to prevent mass shootings. 

### Need
This database is needed because mass shootings occur in such a high frequency across the nation that many cases and incidents are not known to the general public. Our database would assist with shedding light on all mass shootings, which helps display the severity of mass shootings in the United States. Having a non-biased source of mass shooting information may help with the spreading of misinformation pertaining to the incidents. We can also try to use previous mass shootings' data to help predict where others may occur. For example, a big issue is screening gun purchasers - this database could help identify patterns in mass shooters background information, and then we could use that information to implement a solution to minimize the chance of the wrong person having access to legally purchase a weapon.

### Context, scope and perspective
The user base for a database like this would primarily be for the general public, in hopes of spreading awareness of the scale of this issue in the United States. It could also be used by professionals or researchers that are looking to study patterns or simply need statistics pertaining to mass shootings. A further reach is that it could potentially be used by developers to create a predictive model for mass shootings. The general perspective of this database would be for anyone that wants to access and filter data related to mass-shootings, for any reason whether personal or professional.

### User roles and use cases
The general public seeks reliable information on mass shootings to stay informed about the issue and understand its severity. They will use the database to access statistics and search for information on specific incidents, locations, or trends. Law enforcement agencies and policymakers require data-driven insights to formulate and evaluate policies related to gun control, mental health, and public safety. They will monitor trends to inform their policy decisions, using the database for risk assessment and identifying areas in need of policy intervention. Additionally, the database can be seamlessly integrated into various external systems, including news outlets, public awareness campaigns, predictive models, and research institutions.

### Security and Privacy
Security and privacy are top priorities in the database design. User authentication will be enforced for specific data access, while encryption will protect data during transmission and storage. Access controls will limit data access to authorized users, ensuring the integrity of the database and safeguarding sensitive information. This will make sure that we can prevent unauthorized users from modifying or deleting information. Regular audits and updates will maintain these security and privacy measures.

## Database Design

### Entity-relationship diagram (ERD)

```{mermaid}
erDiagram

  INCIDENT }|--|| INCIDENT_VICTIM : has
  INCIDENT_VICTIM ||--|{ VICTIM : has
  INCIDENT }|--|| INCIDENT_PERPETRATOR : has
  INCIDENT_PERPETRATOR ||--|{ PERPETRATOR : has
  PERPETRATOR ||--|{ WEAPON : uses

    INCIDENT{
        int incident_id PK
        date date
        string city
        string state_code
        string description
        string motive
    }
    VICTIM{
        int victim_id PK
        string name
        int age
        string sex
        string status
    }
    PERPETRATOR{
        int perpetrator_id PK
        string name
        int age
        string sex
        string criminal_bg_description
    }
    WEAPON{
        int perpetrator_id PK
        int weapon_id PK
        string type
        string description
    }
    INCIDENT_VICTIM{
        int incident_id PK
        int victim_id PK
    }
    INCIDENT_PERPETRATOR{
        int incident_id PK
        int perpetrator_id PK
    }

```

### Link to DDL
You can see the DDL at the link below.\
[DDL file on Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15/blob/b9b8472d38c80e85a0c347c54a125b708ca58d0c/src/db-ddl.sql){target="_blank"}

## API Overview
This API can be used to query our United States Mass Shooting Database. Below are instructions on how to use the API, as well as some examples of the API in action.\
View the source code for this API at the link below.\
[sever.py on Github](https://github.com/cmsc-vcu/cmsc508-fa2023-prj-massshootingdb-group15/blob/7b12b2ba3b846d86c61b85b19077b5026ab60e95/src/server.py){target="_blank"}

### API Documentation
**How to use the API**

*The root URL will query the database to show all of the tables.*\
```http://127.0.0.1:5000/```

For the following API queries, the valid tables include:\
'incident', 'perpetrator', 'victim', and 'weapon.'

*Get all records of a specified table.*\
```http://127.0.0.1:5000/<table name>```

*Get a specific record from a specific table.*\
```http://127.0.0.1:5000/<table name>/<id>```

*Get all perpetrators of a specified incident.*\
```http://127.0.0.1:5000/incident/<id>/perpetrators```

*Get all victims of a specified incident.*\
```http://127.0.0.1:5000/incident/<id>/victims```

*Get all weapons of a specified perpetrator.*\
```http://127.0.0.1:5000/perpetrator/<id>/weapons```

*Add an incident to the Database (via POST request sending JSON)*\
```http://127.0.0.1:5000/incident/add```

*Update a specified incident in the Database (via POST request sending JSON)*\
```http://127.0.0.1:5000/incident/update/<id>```

*Delete a specific record from a specific table.*\
```http://127.0.0.1:5000/<table name>/remove/<id>```


### API Demonstration
```{python}
#| eval: true
#| echo: false
import os
import requests
import json
import pandas as pd
from IPython.display import display,Markdown,HTML

# Authentication #
# Create variables to store API key and base URL
API_KEY = 'API_KEY'
BASE_URL = 'http://127.0.0.1:5000'  

# Sends a request to server to get an authentication token
def authenticate():
    endpoint = f"{BASE_URL}/auth"
    response = requests.post(endpoint, json={'api_key': API_KEY})

    if response.status_code == 200:
        return response.json().get('token')
    else:
        print("Authentication failed. Here is the api key: ", API_KEY)
        return None

# Store the token that was retrieved from the authenticate function
token = authenticate()

# Create a JSON header for future requests
headers = {'Authorization': token}
```

#### API Get Example

**Get the incident table**
```{python}
#| eval: true
#| echo: true

# Function to print the incident table
def printIncidentTable():
    # Make API call based off endpoint
    endpoint = f'{BASE_URL}/incident'
    response = requests.get(endpoint)

    # Conver to JSON and then to DataFrame
    data = response.json()
    load = json.loads(data)
    df = pd.DataFrame(load)

    # Convert the date values from MS to a readable  date format
    df['date'] = pd.to_datetime(df['date'], unit='ms')

    # Print the result
    print(df.to_string(index=False))

# Call function
printIncidentTable()
```

**Get record with id = 10 from the incident table**
```{python}
#| eval: true
#| echo: true

# Function to print incident table record with a specific id
def printIncidentRecord(id):
    # Make API call based off endpoint
    endpoint = f'{BASE_URL}/incident/{id}'
    response = requests.get(endpoint)

    # Conver to JSON and then to DataFrame
    data = response.json()
    load = json.loads(data)
    df = pd.DataFrame(load)

    # Convert the date values from MS to a readable  date format
    df['date'] = pd.to_datetime(df['date'], unit='ms')

    # Print the result
    print(df.to_string(index=False))

# Call function
printIncidentRecord(10)
```

**Get perpetrator/s from incident 5**
```{python}
#| eval: true
#| echo: true

# Make API call based off endpoint
endpoint = f'{BASE_URL}/incident/5/perpetrators'
response = requests.get(endpoint)

# Conver to JSON and then to DataFrame
data = response.json()
load = json.loads(data)
df = pd.DataFrame(load)

# Print the result
print(df.to_string(index=False))
```

**Get victims/s from incident 12**
```{python}
#| eval: true
#| echo: true

# Make API call based off endpoint
endpoint = f'{BASE_URL}/incident/12/victims'
response = requests.get(endpoint)

# Conver to JSON and then to DataFrame
data = response.json()
load = json.loads(data)
df = pd.DataFrame(load)

# Print the result
print(df.to_string(index=False))
```

**Get weapon/s used by perpetrator 10**
```{python}
#| eval: true
#| echo: true

# Make API call based off endpoint
endpoint = f'{BASE_URL}/perpetrator/10/weapons'
response = requests.get(endpoint)

# Conver to JSON and then to DataFrame
data = response.json()
load = json.loads(data)
df = pd.DataFrame(load)

# Print the result
print(df.to_string(index=False))
```

#### API Insert Example
**Add an incident record to the incident table**\
*Incident table before*\
```{python}
#| eval: true
#| echo: false

# Print incident table
printIncidentTable()
```
```{python}
#| eval: true
#| echo: true

# Data for the new incident
add_incident = {
    'date': '2021-05-20',
    'city': 'Baltimore',
    'state_code': 'MD',
    'description': 'Church attack',
    'motive': 'Relgious beliefs'
}

# Create variables and store base URL and store token
endpoint = f'{BASE_URL}/incident/add'

# Create header to send with request for authorization
headers = {'Authorization': token}

# Send a POST request to add the incident
response = requests.post(endpoint, json=add_incident, headers=headers)
```
*Incident table after*\
```{python}
#| eval: true
#| echo: false

# Print incident table
printIncidentTable()
```

#### API Update Example
**Update incident 12 with new data**\
*Incident 12 before*\
```{python}
#| eval: true
#| echo: true

# Print incident record
printIncidentRecord(12)

# Data to use for updating an incident
update_incident = {
    'date': '2016-06-12',
    'city': 'Orlando',
    'state_code': 'FL',
    'description': 'Nightclub shooting',
    'motive': 'Hate Crime'
}
# Create variables and store base URL and store token
endpoint = f'{BASE_URL}/incident/update/12'

# Create header to send with request for authorization
headers = {'Authorization': token}

# Send a POST request to update the specified incident
response = requests.post(endpoint, json=update_incident, headers=headers)
```
*Incident table after*\
```{python}
#| eval: true
#| echo: false

# Print incident record
printIncidentRecord(12)
```

#### API Delete Example
**Delete record with id = 7 from the incident table**\
*Incident table before*\
```{python}
#| eval: true
#| echo: true

# Print incident table
printIncidentTable()

# Create variables and store base URL and store token
endpoint = f'{BASE_URL}/incident/remove/8'

# Create header to send with request for authorization
headers = {'Authorization': token}

# Make request and store response
response = requests.get(endpoint, headers=headers)
```
*Incident table after*\
```{python}
#| eval: true
#| echo: false

# Print incident table
printIncidentTable()
```
## Considerations and Reflections

### Future Considerations
To take this project to the next level, creating some sort of graphical user interface to display data, as well as inserting/updating would be pretty cool. It would also be nice to use the data to make graphs, or any other way that could make patterns/trends more apparent. Additionally, the API could use some refinement, and with a better client-side platform, we think the API could greatly be improved for much easier data inserts and updates to the database. Another idea could be to automatically pull in incidents and data from other similar databases. We could even take it to the level of web scraping common news websites for keywords, and then automatically pull mass-shooting data into the database as the public hears about it in the news. There are endless ideas on where we could take this kind of project, but I think the most realistic next step would be to work on some sort of front end to display the data we're collecting.

### Reflections on project
Overall the project went smoothly, we were able to achieve creating a mass shooting database, and an API to query the database and show results. We were able to check off all of the base level goals that we had for this project without having to sacrifice anything. In hindsight however, there were some things that could be changed knowing what we know now. For example, when we were thinking of the structure of our API, and how we would display the data - the way that our incident table is currently structured in the database, isn't very friendly for viewing all information relative to an incident, even with SQL JOINs. A solution to this problem could be something like creating a "person" table, where each person stores whether they're a victim or a perpetrator, rather than having separate victim/perpetrator tables, this would make it a bit easier to view. Additionally, adding an incident to the database isn't quite so simple - for example, to add an incident, victim, and perpetrator to the database (all of which would be required to make logical sense), you have to update 5 separate tables manually. Two of those tables are associative tables to handle the many-to-many relationship, which can get confusing since it's only composed of integer ID values. In conclusion, the project went well and we accomplished the tasks that we set out to do.